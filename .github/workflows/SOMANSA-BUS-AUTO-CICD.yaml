name: SOMANSA-BUS-AUTO-CICD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create application.yml from secret
        run: |
          mkdir -p src/main/resources  # 디렉토리 없으면 생성
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      - name: Create application-prod.yml from secret
        run: |
          mkdir -p src/main/resources  # 디렉토리 없으면 생성
          echo "${{ secrets.APPLICATION_PROD_YML }}" > src/main/resources/application-prod.yml

      - name: Build with Gradle
        run: ./gradlew clean build -x test -Dspring.profiles.active=prod

      - name: Docker setup
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:${{ github.ref_name }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:cache
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2022
          script: |
            set -e  # 에러 발생 시 스크립트 중단

            echo "환경 변수 설정 중..."
            export PATH=$PATH:/usr/local/bin
            export PW=${{ secrets.SERVER_PASSWORD }}
            
            # 컨테이너 이름 및 포트 설정
            CONTAINER_NAME_1="somansa-bus-auto-1"
            CONTAINER_NAME_2="somansa-bus-auto-2"
            PORT_1=8091
            PORT_2=8092

            echo "컨테이너 이름 1: $CONTAINER_NAME_1, 포트 1: $PORT_1"
            echo "컨테이너 이름 2: $CONTAINER_NAME_2, 포트 2: $PORT_2"

            echo "도커 이미지 풀: ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:main"
            echo $PW | sudo -S docker pull ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:main

            # 기존 컨테이너 중지 및 삭제
            for CONTAINER in $CONTAINER_NAME_1 $CONTAINER_NAME_2; do
              echo "컨테이너 $CONTAINER 존재 여부 확인 중..."
              if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER}$"; then
                echo "컨테이너 $CONTAINER 이(가) 존재합니다. 중지 및 삭제 중..."
                echo $PW | sudo -S docker rm -f $CONTAINER
                echo "컨테이너 $CONTAINER 이(가) 삭제되었습니다."
              else
                echo "존재하는 컨테이너 $CONTAINER 이(가) 없습니다."
              fi
            done

            # 새로운 컨테이너 실행
            echo "새로운 컨테이너 $CONTAINER_NAME_1 실행 중..."
            echo $PW | sudo -S docker run -d -p ${PORT_1}:8080 --name $CONTAINER_NAME_1 \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              -v /etc/localtime:/etc/localtime:ro \
              -v /volume1/projects/suh-project-utility:/mnt/suh-project-utility \
              ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:main

            echo "새로운 컨테이너 $CONTAINER_NAME_2 실행 중..."
            echo $PW | sudo -S docker run -d -p ${PORT_2}:8080 --name $CONTAINER_NAME_2 \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              -v /etc/localtime:/etc/localtime:ro \
              -v /volume1/projects/suh-project-utility:/mnt/suh-project-utility \
              ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:main

            echo "배포가 성공적으로 완료되었습니다."

name: SOMANSA-BUS-AUTO-CICD

on:
  push:
    branches:
      - main
      - test
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create application.yml from secret
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      - name: Create application-prod.yml from secret
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > src/main/resources/application-prod.yml

      - name: Build with Gradle
        run: ./gradlew clean build -x test -Dspring.profiles.active=prod

      - name: Docker setup
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:main
            ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:test
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:cache
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2022
          script: |
            set -e

            echo "환경 변수 설정 중..."
            export PATH=$PATH:/usr/local/bin
            export PW=${{ secrets.SERVER_PASSWORD }}

            # 브랜치에 따른 컨테이너명 & 포트
            if [[ "${{ github.ref_name }}" == "main" ]]; then
              CONTAINER_NAME="somansa-bus-auto-back"
              PORT=8091
              IMAGE_TAG="main"
            elif [[ "${{ github.ref_name }}" == "test" ]]; then
              CONTAINER_NAME="somansa-bus-auto-back-test"
              PORT=8092
              IMAGE_TAG="test"
            else
              echo "🚨 지원되지 않는 브랜치입니다: ${{ github.ref_name }}"
              exit 1
            fi

            echo "배포할 브랜치: ${{ github.ref_name }}"
            echo "컨테이너 이름: $CONTAINER_NAME"
            echo "포트: $PORT"
            echo "도커 이미지 태그: $IMAGE_TAG"

            echo "도커 이미지 풀: ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:$IMAGE_TAG"
            echo $PW | sudo -S docker pull ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:$IMAGE_TAG

            echo "기존 컨테이너 $CONTAINER_NAME 중지 및 삭제 중..."
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}$"; then
              echo $PW | sudo -S docker stop $CONTAINER_NAME
              echo $PW | sudo -S docker rm $CONTAINER_NAME
              echo "✅ 컨테이너 $CONTAINER_NAME 삭제 완료."
            else
              echo "🟢 기존 컨테이너 없음."
            fi

            echo "🚀 새로운 컨테이너 $CONTAINER_NAME 실행 중..."
            echo $PW | sudo -S docker run -d -p ${PORT}:8080 --name $CONTAINER_NAME \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -e TZ=Asia/Seoul \
              -e SPRING_PROFILES_ACTIVE=prod \
              -v /etc/localtime:/etc/localtime:ro \
              -v /volume1/projects/somansa-bus-auto:/mnt/somansa-bus-auto \
              ${{ secrets.DOCKERHUB_USERNAME }}/somansa-bus-auto:$IMAGE_TAG

            echo "🎉 배포가 성공적으로 완료되었습니다."
